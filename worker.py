import os
import subprocess
import requests
import json
from celery import Celery

CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "redis://redis:6379/0")
CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND", "redis://redis:6379/0")

celery_app = Celery(
    "tasks",
    broker=CELERY_BROKER_URL,
    backend=CELERY_RESULT_BACKEND
)

def create_openscad_script(prompt: str, export_path: str) -> str:
    """Create an OpenSCAD script based on the prompt"""
    prompt_lower = prompt.lower()
    
    # Base script template
    base_script = f"""
// OpenSCAD script for: {prompt}
// Generated by Artisan AI

// Basic shapes based on prompt
"""
    
    # Generate different shapes based on prompt keywords
    if 'cube' in prompt_lower or 'box' in prompt_lower:
        script = base_script + """
cube([2, 2, 2], center=true);
"""
    elif 'sphere' in prompt_lower or 'ball' in prompt_lower:
        script = base_script + """
sphere(r=1);
"""
    elif 'cylinder' in prompt_lower or 'tube' in prompt_lower:
        script = base_script + """
cylinder(h=3, r=1, center=true);
"""
    elif 'cone' in prompt_lower:
        script = base_script + """
cylinder(h=3, r1=1, r2=0, center=true);
"""
    elif 'pyramid' in prompt_lower:
        script = base_script + """
polyhedron(
    points=[[0,0,0], [1,0,0], [1,1,0], [0,1,0], [0.5,0.5,2]],
    faces=[[0,1,2,3], [0,4,1], [1,4,2], [2,4,3], [3,4,0]]
);
"""
    elif 'tree' in prompt_lower:
        script = base_script + """
// Simple tree
color("brown") cylinder(h=2, r=0.2, center=false);
color("green") translate([0,0,2]) sphere(r=0.8);
"""
    elif 'house' in prompt_lower:
        script = base_script + """
// Simple house
color("gray") cube([2, 2, 1], center=true);
color("red") translate([0,0,0.5]) 
    polyhedron(
        points=[[-1,-1,0], [1,-1,0], [1,1,0], [-1,1,0], [0,0,1]],
        faces=[[0,1,2,3], [0,4,1], [1,4,2], [2,4,3], [3,4,0]]
    );
"""
    elif 'car' in prompt_lower:
        script = base_script + """
// Simple car
color("blue") {
    // Body
    cube([3, 1.5, 0.5], center=true);
    // Wheels
    translate([-1, -0.8, -0.2]) cylinder(h=0.1, r=0.3, center=true);
    translate([-1, 0.8, -0.2]) cylinder(h=0.1, r=0.3, center=true);
    translate([1, -0.8, -0.2]) cylinder(h=0.1, r=0.3, center=true);
    translate([1, 0.8, -0.2]) cylinder(h=0.1, r=0.3, center=true);
}
"""
    elif 'spaceship' in prompt_lower or 'rocket' in prompt_lower or 'ship' in prompt_lower:
        script = base_script + """
// Simple spaceship/rocket
color("white") {
    // Main body
    cylinder(h=4, r=0.5, center=true);
    // Nose cone
    translate([0,0,2]) cylinder(h=1, r1=0.5, r2=0, center=true);
    // Fins
    translate([0,0,-1.5]) {
        cube([0.1, 1, 0.5], center=true);
        rotate([0,0,90]) cube([0.1, 1, 0.5], center=true);
    }
    // Engine exhaust
    translate([0,0,-2]) cylinder(h=0.5, r=0.3, center=true);
}
"""
    elif 'robot' in prompt_lower or 'android' in prompt_lower:
        script = base_script + """
// Simple robot
color("silver") {
    // Head
    translate([0,0,1.5]) cube([1, 1, 1], center=true);
    // Body
    cube([1.5, 1, 2], center=true);
    // Arms
    translate([1,0,0.5]) cube([0.5, 0.3, 1], center=true);
    translate([-1,0,0.5]) cube([0.5, 0.3, 1], center=true);
    // Legs
    translate([0.3,0,-1]) cube([0.3, 0.3, 1], center=true);
    translate([-0.3,0,-1]) cube([0.3, 0.3, 1], center=true);
}
"""
    elif 'dragon' in prompt_lower or 'monster' in prompt_lower:
        script = base_script + """
// Simple dragon/monster
color("green") {
    // Body
    cylinder(h=3, r=0.8, center=true);
    // Head
    translate([0,0,2]) sphere(r=0.6);
    // Wings
    translate([0,0,1]) {
        rotate([0,0,45]) cube([0.1, 2, 1], center=true);
        rotate([0,0,-45]) cube([0.1, 2, 1], center=true);
    }
    // Tail
    translate([0,0,-1.5]) cylinder(h=1, r=0.3, center=true);
}
"""
    elif 'castle' in prompt_lower or 'tower' in prompt_lower:
        script = base_script + """
// Simple castle
color("gray") {
    // Main tower
    cylinder(h=3, r=1, center=true);
    // Turrets
    translate([0.8,0.8,1]) cylinder(h=1, r=0.3, center=true);
    translate([-0.8,0.8,1]) cylinder(h=1, r=0.3, center=true);
    translate([0.8,-0.8,1]) cylinder(h=1, r=0.3, center=true);
    translate([-0.8,-0.8,1]) cylinder(h=1, r=0.3, center=true);
    // Flag
    translate([0,0,2]) color("red") cube([0.1, 0.5, 0.3], center=true);
}
"""
    elif 'flower' in prompt_lower or 'plant' in prompt_lower:
        script = base_script + """
// Simple flower
color("green") cylinder(h=2, r=0.1, center=false);  // Stem
color("yellow") translate([0,0,2]) sphere(r=0.3);   // Center
color("red") {
    translate([0.3,0,2]) sphere(r=0.2);  // Petals
    translate([-0.3,0,2]) sphere(r=0.2);
    translate([0,0.3,2]) sphere(r=0.2);
    translate([0,-0.3,2]) sphere(r=0.2);
}
"""
    else:
        # Default to a cube for unknown prompts
        script = base_script + """
cube([2, 2, 2], center=true);
"""
    
    return script

def create_fallback_script(prompt: str, export_path: str) -> str:
    """Create a simple fallback OpenSCAD script when the AI-generated script fails"""
    return create_openscad_script(prompt, export_path)

@celery_app.task(name="worker.generate_model_task")
def generate_model_task(
    prompt: str, task_id: str, quality: str = 'low',
    style: str = '', environment: str = '', lighting: str = '', color_scheme: str = '',
    special_features: str = '', scale: str = '', level_of_detail: str = '', material_appearance: str = '',
    symmetry: str = '', animation: str = '', output_format: str = '', other_requirements: str = ''
):
    # Use smart defaults if fields are blank
    style = style or 'default'
    environment = environment or 'default'
    lighting = lighting or 'default'
    color_scheme = color_scheme or 'pastel colors'
    special_features = special_features or 'none'
    scale = scale or 'medium'
    level_of_detail = level_of_detail or ('simple' if quality == 'low' else 'detailed')
    material_appearance = material_appearance or 'matte'
    symmetry = symmetry or 'symmetrical'
    animation = animation or 'none'
    output_format = output_format or 'GLB'
    other_requirements = other_requirements or 'none'

    meta_prompt = f"""
You are an expert OpenSCAD script generator. Your task is to create a detailed, visually appealing, and error-free OpenSCAD script for a 3D model based on the following specifications:

Object Type: {prompt}
Style: {style}
Environment/Context: {environment}
Lighting/Shadow Effects: {lighting}
Color Scheme: {color_scheme}
Special Features/Details: {special_features}
Scale/Dimensions: {scale}
Level of Detail: {level_of_detail}
Material Appearance: {material_appearance}
Symmetry/Asymmetry: {symmetry}
Animation/Movement: {animation}
Output Format: {output_format}
Other Requirements: {other_requirements}

Instructions:
- Carefully analyze each field and incorporate all specified features into the model.
- Use only OpenSCADâ€™s built-in primitives and transformations (cube, sphere, cylinder, polyhedron, translate, rotate, scale, color, etc.).
- Use the color() function to match the color scheme and material appearance.
- Add comments in the script to explain each section and feature.
- Ensure the model is visually cohesive and matches the described style and environment.
- If animation is requested, include a simple OpenSCAD animation block (if possible).
- The script must be self-contained, error-free, and executable in OpenSCAD.
- Output only a single JSON object with the key "openscad_script" and the script as a string value.
- Do not include any external assets or dependencies.
- If any field is not specified, make a reasonable artistic choice and document it in a comment.

Example JSON Output:
{{
  "openscad_script": "// OpenSCAD script for: {prompt}\\n// Style: {style}\\n// ...\\ncolor(\\"red\\") cube([2,2,2], center=true); // Main body\\n// ... (rest of the script)"
}}

Now, generate the JSON output for the above specifications. Make sure the model is detailed, visually interesting, and matches all the requirements.
"""
    
    # Use the correct host address for Windows Docker
    ollama_url = "http://host.docker.internal:11434/api/generate"
    
    # Try alternative host addresses if the first one fails
    host_addresses = [
        "http://host.docker.internal:11434/api/generate",
        "http://172.17.0.1:11434/api/generate",  # Docker bridge network gateway
        "http://10.0.2.2:11434/api/generate",    # Alternative Docker host
    ]
    
    payload = {
        "model": "codellama:7b",
        "prompt": meta_prompt,
        "format": "json",
        "stream": False
    }

    last_error = None
    for ollama_url in host_addresses:
        try:
            print(f"Trying to connect to Ollama at: {ollama_url}")
            response = requests.post(ollama_url, json=payload, timeout=120)
            response.raise_for_status()
            
            response_data = response.json()
            
            generated_json_str = response_data.get("response")
            if not generated_json_str:
                raise ValueError("Ollama response did not contain 'response' field.")
                
            script_data = json.loads(generated_json_str)
            openscad_script = script_data.get("openscad_script")

            if not openscad_script or not isinstance(openscad_script, str):
                raise ValueError("Generated JSON from Ollama does not contain a valid 'openscad_script' string.")
            
            print(f"Successfully connected to Ollama at: {ollama_url}")
            break  # Success, exit the loop

        except requests.exceptions.RequestException as e:
            last_error = e
            print(f"Failed to connect to {ollama_url}: {e}")
            continue
        except (ValueError, KeyError, json.JSONDecodeError) as e:
            last_error = e
            print(f"Failed to parse response from {ollama_url}: {e}")
            continue
    else:
        # If we get here, all addresses failed
        raise Exception(f"Failed to connect to Ollama API. Tried all addresses. Last error: {last_error}")

    # 2. Run OpenSCAD script with retry logic
    output_dir = "/app/models"
    os.makedirs(output_dir, exist_ok=True)
    model_filename = f"{task_id}.glb"
    export_path = os.path.join(output_dir, model_filename)

    # Try the AI-generated script first
    script_filename = f"/tmp/{task_id}.scad"
    
    with open(script_filename, "w") as f:
        f.write(openscad_script)

    try:
        openscad_executable = "openscad"
        
        # Run OpenSCAD to generate STL first, then convert to GLB
        stl_path = f"/tmp/{task_id}.stl"
        
        result = subprocess.run(
            [openscad_executable, "-o", stl_path, script_filename],
            capture_output=True,
            text=True,
            timeout=120  # 2 minute timeout
        )
        
        # Check if STL was created
        if not os.path.exists(stl_path):
            raise Exception(f"AI-generated OpenSCAD script failed to create STL file")
        
        # Convert STL to GLB using a simple Python script
        glb_script = f"""
import trimesh
import numpy as np

# Load the STL file
mesh = trimesh.load('{stl_path}')

# Export as GLB
mesh.export('{export_path}')
"""
        
        glb_script_filename = f"/tmp/{task_id}_convert.py"
        with open(glb_script_filename, "w") as f:
            f.write(glb_script)
        
        # Run the conversion script
        result = subprocess.run(
            ["python", glb_script_filename],
            capture_output=True,
            text=True,
            timeout=60
        )
        
        # Check if GLB was created
        if not os.path.exists(export_path):
            raise Exception(f"Failed to convert STL to GLB")
        
        # Verify file size is not zero
        file_size = os.path.getsize(export_path)
        if file_size == 0:
            raise Exception(f"AI-generated script created an empty file")
            
        print(f"Successfully created model file: {export_path} (size: {file_size} bytes)")
        
    except Exception as e:
        print(f"AI-generated script failed: {e}")
        print("Trying fallback script...")
        
        # Try fallback script
        fallback_script = create_fallback_script(prompt, export_path)
        
        with open(script_filename, "w") as f:
            f.write(fallback_script)
        
        try:
            # Run fallback OpenSCAD script
            stl_path = f"/tmp/{task_id}_fallback.stl"
            
            result = subprocess.run(
                [openscad_executable, "-o", stl_path, script_filename],
                capture_output=True,
                text=True,
                timeout=120
            )
            
            if not os.path.exists(stl_path):
                error_msg = f"Both AI-generated and fallback scripts failed to create STL file"
                if result.stdout:
                    error_msg += f"\nOpenSCAD STDOUT: {result.stdout}"
                if result.stderr:
                    error_msg += f"\nOpenSCAD STDERR: {result.stderr}"
                raise Exception(error_msg)
            
            # Convert STL to GLB
            glb_script = f"""
import trimesh
import numpy as np

# Load the STL file
mesh = trimesh.load('{stl_path}')

# Export as GLB
mesh.export('{export_path}')
"""
            
            glb_script_filename = f"/tmp/{task_id}_fallback_convert.py"
            with open(glb_script_filename, "w") as f:
                f.write(glb_script)
            
            result = subprocess.run(
                ["python", glb_script_filename],
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if not os.path.exists(export_path):
                raise Exception(f"Fallback script failed to convert STL to GLB")
            
            file_size = os.path.getsize(export_path)
            if file_size == 0:
                raise Exception(f"Fallback script created an empty file at {export_path}")
                
            print(f"Fallback script succeeded! Created model file: {export_path} (size: {file_size} bytes)")
            
        except subprocess.TimeoutExpired:
            raise Exception("OpenSCAD script execution timed out after 2 minutes")
        except subprocess.CalledProcessError as e:
            openscad_error_log = f"OpenSCAD STDOUT: {e.stdout}\nOpenSCAD STDERR: {e.stderr}"
            raise Exception(f"Fallback OpenSCAD script execution failed: {openscad_error_log}")
        
    except subprocess.TimeoutExpired:
        raise Exception("OpenSCAD script execution timed out after 2 minutes")
    except subprocess.CalledProcessError as e:
        openscad_error_log = f"OpenSCAD STDOUT: {e.stdout}\nOpenSCAD STDERR: {e.stderr}"
        raise Exception(f"OpenSCAD script execution failed: {openscad_error_log}")
    finally:
        # Clean up temporary files
        for temp_file in [script_filename, glb_script_filename, stl_path]:
            if 'temp_file' in locals() and os.path.exists(temp_file):
                os.remove(temp_file)

    return {"status": "completed", "model_filename": model_filename}
